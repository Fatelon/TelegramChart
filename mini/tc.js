class Point{constructor(t,i){this.x=t,this.y=i}}class Pair{constructor(t,i){this.left=t,this.right=i}}class Interval{constructor(t,i,e){this.left=t,this.right=i,this.step=e}isEqual(t){return this.left===t.left&&this.right===t.right&&this.step===t.step}}class Boundaries{constructor(t,i,e,s){this.top=t,this.right=i,this.bottom=e,this.left=s}getPair(t){return t?new Pair(this.left,this.right):new Pair(this.bottom,this.top)}}class Utils{static getMiddleInterval(t,i,e){return new Interval(t.left+(i.left-t.left)*e,t.right+(i.right-t.right)*e,t.step+(i.step-t.step)*e)}static getYBorderPair(t,i,e){const s=new Pair(Number.MAX_VALUE,Number.MIN_VALUE);return t.forEach((t,a)=>{i[e[a]].inUse&&(s.left=Math.min(Math.min(...t),s.left),s.right=Math.max(Math.max(...t),s.right))}),s}static drawChartLine(t,i,e,s,a,n,h){0!==n&&(t.lineWidth=a,t.lineCap="round",t.strokeStyle=s,t.beginPath(),t.globalAlpha=n,i.forEach((i,s)=>{e.length>s&&t.lineTo(i,e[s])}),t.stroke(),null!==h&&(t.beginPath(),t.fillStyle="#FFFFFF",t.arc(i[h],e[h],5,0,2*Math.PI),t.fill(),t.arc(i[h],e[h],5,0,2*Math.PI),t.stroke()),t.globalAlpha=1)}static formatDate(t){const i=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],e=t.getDate();return i[t.getMonth()]+" "+e}static getScale(t,i){return Math.abs(i.right-i.left)/Math.abs(t.right-t.left)}static isPointInFrame(t,i){return!(t.x<i.left||t.x>i.right||t.y<i.bottom||t.y>i.top)}static getInterval(t,i){const e=(t.right-t.left)/(i-1),s=[1,1.5,2,2.5,5,7.5,10],a=Math.pow(10,-Math.floor(Math.log10(Math.abs(e)))),n=e*a,h=s.find(t=>t>=n),r=Number.parseInt((h/a).toFixed()),o=Math.ceil(t.right/r)*r,l=Math.floor(t.left/r)*r;return new Interval(l,o,r)}}class TelegramChart{constructor(t,i){this.init(t,i)}init(t,i){this.canvasContext=null,this.canvas=null,this.width=Math.max(2*window.innerWidth/3,300),this.height=Math.max(2*window.innerHeight/3,200),this.xData=[],this.yAllData=[],this.limitedData=new Point([],[]),this.linesColors=[],this.yIds={},this.yIdsKeys=[],this.lablesNumber=new Point(7,7),this.yPredInterval=new Interval(0,0,1),this.yNewInterval=new Interval(0,0,1),this.axeBoundInterval=new Point(new Interval(0,0,1),new Interval(0,0,1)),this.currentScale=new Point(1,1),this.animationFactor=new Point(1,1),this.currentAnimation=new Point(null,null),this.promptAnimation=null,this.xPredStep=0,this.yPredScale=0,this.frameDragType="",this.changeFrameAllowed=!1,this.minFrameWidth=this.width/100,this.predMousePoint=new Point(0,0),this.canvasMargin=new Boundaries(30,0,0,0),this.fBorderWidth=new Point(this.width/100,this.height/250),this.setColors(!1),this.prepareData(t),this.initCanvas(i),this.refreshView(!0)}setColors(t){this.labelsTextFont1="lighter 9pt Helvetica",this.labelsTextFont2="lighter 18pt Helvetica",this.labelsTextColor="#96A2AA",this._frameColor="rgba(221, 234, 243, 0.7)",this._outFrameColor="rgba(245, 249, 251, 0.7)"}prepareData(t){t.columns.forEach(i=>{const e=i.slice(0,1);const s=i.slice(1);"x"===t.types[e]?this.xData=s:"line"===t.types[e]&&(this.yIdsKeys.push(e),this.yIds[e]={inUse:!0,alpha:0},this.yAllData.push(s),this.linesColors.push(t.colors[e]),this.names=t.names)})}initCanvas(t){this.addBoard(t),this.canvas.onmouseup=this.onMouseUp.bind(this),this.canvas.onmousedown=this.onMouseDown.bind(this),this.canvas.onmousemove=this.onMouseMove.bind(this),this.canvas.onmouseleave=this.onMouseLeave.bind(this),this.addMobile(),this.canvas.width=this.width,this.canvas.height=this.height,this.canvasContext=this.canvas.getContext("2d"),this.canvasContext.transform(1,0,0,-1,0,this.canvas.height);const i=.15*this.canvas.height;this.bigChartBoundaries=new Boundaries(this.canvas.height-this.canvasMargin.top,this.canvas.width-this.canvasMargin.right,this.canvasMargin.bottom+i+30,this.canvasMargin.left),this.smallChartBoundaries=new Boundaries(i+this.canvasMargin.bottom,this.canvas.width-this.canvasMargin.right,this.canvasMargin.bottom,this.canvasMargin.left),this.smallChartWidth=this.smallChartBoundaries.right-this.smallChartBoundaries.left,this.frameBoundaries=new Boundaries(this.smallChartBoundaries.top,this.smallChartBoundaries.left+.2*this.canvas.width,this.smallChartBoundaries.bottom,this.smallChartBoundaries.left)}addBoard(t){this.prompt=document.getElementById("prompt");const i=document.getElementById("cc"),e=document.createElement("div");this.canvas=document.createElement("canvas");const s=document.createElement("div");s.className="bp",e.style.width=this.width+"px",this.yIdsKeys.forEach(t=>{const i=document.createElement("label");const e=document.createElement("input");e.type="checkbox";e.setAttribute("checked","true");i.appendChild(e);i.innerHTML+=this.names[t];s.appendChild(i);i.onchange=this.clickOnButton.bind(this,t);i.onselectstart=(()=>!1)});const a=document.createElement("h4");a.innerHTML=t,a.onselectstart=(()=>!1),a.style.textAlign="left",e.appendChild(a),e.appendChild(this.canvas),e.appendChild(s),i.appendChild(e)}refreshView(t,i){(t||i)&&this.calculateDataAndBoundaries(i),this.canvasContext.clearRect(0,0,this.canvas.width,this.canvas.height),this.drawBigChart(),this.canvasContext.clearRect(0,0,this.smallChartBoundaries.right,this.smallChartBoundaries.top),this.drawSmallChart()}calculateDataAndBoundaries(t){const i=new Pair(this.frameBoundaries.left/this.smallChartWidth,this.frameBoundaries.right/this.smallChartWidth),e=this.xData[this.xData.length-1]-this.xData[0];this.axeBoundInterval.x.left=e*i.left+this.xData[0],this.axeBoundInterval.x.right=e*i.right+this.xData[0];let s=0,a=0;this.xData.forEach((t,i)=>{t<this.axeBoundInterval.x.left?s=i+1:t>this.axeBoundInterval.x.right||(a=i)});const n=0===this.xPredStep;for(;Math.ceil((a-s+1)/this.axeBoundInterval.x.step)>9;)this.xPredStep=this.axeBoundInterval.x.step,this.axeBoundInterval.x.step*=2,!n&&this.checkAndRunXAnimation();for(;5>Math.ceil((a-s+1)/this.axeBoundInterval.x.step);)this.xPredStep=this.axeBoundInterval.x.step,this.axeBoundInterval.x.step/=2,!n&&this.checkAndRunXAnimation();s=Math.max(s-1,0),a=Math.min(a+1,this.xData.length-1)+1,this.limitedData.x=this.xData.slice(s,a),this.limitedData.y=this.yAllData.map(t=>t.slice(s,a)),this.currentScale.x=Utils.getScale(this.axeBoundInterval.x,this.bigChartBoundaries.getPair(!0));const h=Utils.getYBorderPair(this.limitedData.y,this.yIds,this.yIdsKeys);let r=Utils.getInterval(h,this.lablesNumber.y);h.right<h.left&&(r=new Interval(10,10,1)),!t&&r.isEqual(this.yNewInterval)||(null!==this.currentAnimation.y&&(clearTimeout(this.currentAnimation.y),this.yPredInterval=this.yNewInterval),this.yNewInterval=r,this.runYAnimation(0,this))}runYAnimation(t,i){(t+=.1)>1?(i.yCalculateMiddleIntervalAndRefrash(1),clearTimeout(i.currentAnimation.y),i.currentAnimation.y=null):(i.yCalculateMiddleIntervalAndRefrash(t),i.currentAnimation.y=setTimeout(i.runYAnimation,15,t,i))}yCalculateMiddleIntervalAndRefrash(t){this.yIdsKeys.forEach(i=>{this.yIds[i].inUse&&1>this.yIds[i].alpha&&(this.yIds[i].alpha=t);!this.yIds[i].inUse&&this.yIds[i].alpha>0&&(this.yIds[i].alpha=1-t)}),1===t?(this.yPredInterval=this.yNewInterval,this.axeBoundInterval.y=this.yNewInterval):this.axeBoundInterval.y=Utils.getMiddleInterval(this.yPredInterval,this.yNewInterval,t),this.animationFactor.y=t,this.currentScale.y=Utils.getScale(this.axeBoundInterval.y,this.bigChartBoundaries.getPair(!1)),this.refreshView(!1)}checkAndRunXAnimation(){null!==this.currentAnimation.x&&clearTimeout(this.currentAnimation.x),this.runXAnimation(0)}runXAnimation(t){t+=.1,this.animationFactor.x=Math.min(t,1),t>1?(this.animationFactor.x=1,this.xPredStep=this.axeBoundInterval.x.step,clearTimeout(this.currentAnimation.x),this.currentAnimation.x=null,null===this.currentAnimation.y&&this.refreshView(!1)):(null===this.currentAnimation.y&&this.refreshView(!1),this.currentAnimation.x=setTimeout(this.runXAnimation.bind(this),15,t))}drawBigChart(){if(this.yNewInterval.left===this.yNewInterval.right)return void this.drawNoDataText();1!==this.animationFactor.y&&this.drawHorizontalLines(this.yPredInterval,1-this.animationFactor.y),this.drawHorizontalLines(this.yNewInterval,this.animationFactor.y);const t=this.limitedData.x.map(t=>(t-this.axeBoundInterval.x.left)*this.currentScale.x+this.bigChartBoundaries.left),i=this.drawVerticalLine(t);this.limitedData.y.forEach((e,s)=>{Utils.drawChartLine(this.canvasContext,t,e.map(t=>(t-this.axeBoundInterval.y.left)*this.currentScale.y+this.bigChartBoundaries.bottom),this.linesColors[s],3,this.yIds[this.yIdsKeys[s]].alpha,i)}),1!==this.animationFactor.y&&this.drawYScaleLabelsText(this.yPredInterval,1-this.animationFactor.y),this.drawYScaleLabelsText(this.yNewInterval,this.animationFactor.y),this.drawXScaleLabelsText()}drawNoDataText(){const t=this.canvas.height;this.canvasContext.transform(1,0,0,-1,0,t),this.canvasContext.globalAlpha=this.animationFactor.y,this.canvasContext.fillStyle=this.labelsTextColor,this.canvasContext.font=this.labelsTextFont2,this.canvasContext.fillText("No data available",this.canvas.width/2-this.canvas.width/10,this.canvas.height/2),this.canvasContext.transform(1,0,0,-1,0,t),this.canvasContext.stroke(),this.canvasContext.globalAlpha=1}drawHorizontalLines(t,i){this.canvasContext.beginPath(),this.canvasContext.strokeStyle="rgba(223, 230, 235, "+i+")",this.canvasContext.lineWidth=1;let e=0;for(;e<=t.right-t.left&&t.step>0;){const i=e*this.currentScale.y+this.bigChartBoundaries.bottom;this.canvasContext.moveTo(this.bigChartBoundaries.left,i),this.canvasContext.lineTo(this.bigChartBoundaries.right,i),e+=t.step}this.canvasContext.stroke()}drawVerticalLine(t){if(!this.changeFrameAllowed&&Utils.isPointInFrame(this.predMousePoint,this.bigChartBoundaries)){let i=0;for(;Math.abs(t[i+1]-this.predMousePoint.x)<Math.abs(t[i]-this.predMousePoint.x)||this.bigChartBoundaries.left>t[i]&&this.bigChartBoundaries.right>=t[i];)i++;this.canvasContext.beginPath(),this.canvasContext.strokeStyle="#B6C2CA",this.canvasContext.lineWidth=1,this.canvasContext.moveTo(t[i],this.bigChartBoundaries.top),this.canvasContext.lineTo(t[i],this.bigChartBoundaries.bottom),this.canvasContext.stroke();const e=Math.round(this.canvas.offsetLeft+t[i]-30)+"px";return e==this.prompt.style.left&&this.prompt.style.opacity>0||(clearTimeout(this.promptAnimation),this.runPromptAnimation(0,.05)),this.prompt.style.left=e,this.prompt.style.top=this.canvas.offsetTop+30+"px",i}return this.prompt.style.opacity>0&&(clearTimeout(this.promptAnimation),this.prompt.style.opacity="0"),null}runPromptAnimation(t,i){t+=i,this.prompt.style.opacity=t+"",t>0&&1>t&&(this.promptAnimation=setTimeout(this.runPromptAnimation.bind(this),30,t,i))}drawYScaleLabelsText(t,i){const e=this.canvas.height;this.canvasContext.transform(1,0,0,-1,0,e),this.canvasContext.fillStyle="rgba(150, 162, 170, "+i+")",this.canvasContext.font=this.labelsTextFont1;let s=0;for(;s<=t.right-t.left&&t.step>0;){const i=s*this.currentScale.y+this.bigChartBoundaries.bottom;this.canvasContext.fillText(""+(t.left+s),this.bigChartBoundaries.left,e-i-.015*e),s+=t.step}this.canvasContext.transform(1,0,0,-1,0,e)}drawXScaleLabelsText(){const t=this.canvas.height;this.canvasContext.transform(1,0,0,-1,0,t),this.canvasContext.fillStyle="rgba(150, 162, 170, 1)";let i=this.xPredStep<this.axeBoundInterval.x.step?1-this.animationFactor.x:this.animationFactor.x;const e=Math.min(this.xPredStep,this.axeBoundInterval.x.step);for(let s=0;s<=this.xData.length;s+=e){this.canvasContext.fillStyle="rgba(150, 162, 170, "+(s/e%2==0?1:i)+")";const a=this.xData[s],n=(a-this.axeBoundInterval.x.left)*this.currentScale.x+this.bigChartBoundaries.left;this.canvasContext.fillText(""+Utils.formatDate(new Date(a)),n,t-this.bigChartBoundaries.bottom+20)}this.canvasContext.transform(1,0,0,-1,0,t)}drawSmallChart(){this.yNewInterval.left===this.yNewInterval.right&&(this.yPredScale=0);const t=this.smallChartBoundaries.bottom+5,i=Utils.getYBorderPair(this.yAllData,this.yIds,this.yIdsKeys);let e=Utils.getScale(i,new Pair(t,this.smallChartBoundaries.top-5));1===this.animationFactor.y&&(this.yPredScale=e);const s=Utils.getScale(new Pair(this.xData[0],this.xData[this.xData.length-1]),this.smallChartBoundaries),a=this.xData.map(t=>(t-this.xData[0])*s+this.smallChartBoundaries.left);this.yNewInterval.left!==this.yNewInterval.right&&this.yAllData.forEach((s,n)=>{let h=this.yPredScale+(e-this.yPredScale)*this.animationFactor.y;this.yIds[this.yIdsKeys[n]].inUse&&this.yIds[this.yIdsKeys[n]].alpha>=1||(h=this.yPredScale);this.yIds[this.yIdsKeys[n]].inUse&&1>this.yIds[this.yIdsKeys[n]].alpha&&(h=e);Utils.drawChartLine(this.canvasContext,a,s.map(e=>(e-i.left)*h+t),this.linesColors[n],1,this.yIds[this.yIdsKeys[n]].alpha,null)}),this.drawFrame()}drawFrame(){const t=this.fBorderWidth.x,i=this.fBorderWidth.y;this.canvasContext.strokeStyle=this._frameColor,this.canvasContext.beginPath(),this.canvasContext.lineCap="butt",this.canvasContext.lineWidth=i,this.canvasContext.moveTo(this.frameBoundaries.left,this.frameBoundaries.top-i/2),this.canvasContext.lineTo(this.frameBoundaries.right,this.frameBoundaries.top-i/2),this.canvasContext.moveTo(this.frameBoundaries.right,this.frameBoundaries.bottom+i/2),this.canvasContext.lineTo(this.frameBoundaries.left,this.frameBoundaries.bottom+i/2),this.canvasContext.stroke(),this.canvasContext.beginPath(),this.canvasContext.lineWidth=t,this.canvasContext.moveTo(this.frameBoundaries.left+t/2,this.frameBoundaries.bottom+i),this.canvasContext.lineTo(this.frameBoundaries.left+t/2,this.frameBoundaries.top-i),this.canvasContext.moveTo(this.frameBoundaries.right-t/2,this.frameBoundaries.top-i),this.canvasContext.lineTo(this.frameBoundaries.right-t/2,this.frameBoundaries.bottom+i),this.canvasContext.stroke(),this.canvasContext.fillStyle=this._outFrameColor,this.canvasContext.fillRect(this.smallChartBoundaries.left,this.smallChartBoundaries.bottom,this.frameBoundaries.left-this.smallChartBoundaries.left,this.frameBoundaries.top-this.smallChartBoundaries.bottom),this.canvasContext.fillRect(this.frameBoundaries.right,this.frameBoundaries.bottom,this.smallChartBoundaries.right-this.frameBoundaries.right,this.frameBoundaries.top-this.smallChartBoundaries.bottom)}clickOnButton(t){this.yIds[t].inUse=!this.yIds[t].inUse,this.refreshView(!0,!0)}onMouseUp(t){this.changeFrameAllowed=!1}onMouseDown(t){const i=t.target.getBoundingClientRect(),e=new Point(t.clientX-i.left,i.bottom-t.clientY);Utils.isPointInFrame(e,this.smallChartBoundaries)?(this.changeFrameAllowed=!0,this.predMousePoint=e,e.x<this.frameBoundaries.left+this.fBorderWidth.x?this.frameDragType="left":e.x>this.frameBoundaries.right-this.fBorderWidth.x?this.frameDragType="right":this.frameDragType="center"):this.changeFrameAllowed=!1}onMouseMove(t){const i=t.target.getBoundingClientRect(),e=new Point(t.clientX-i.left,i.bottom-t.clientY);if(e.x!==this.predMousePoint.x){if(this.changeFrameAllowed){const t=e.x-this.predMousePoint.x;if("left"===this.frameDragType){const i=Math.min(this.frameBoundaries.left+t,this.frameBoundaries.right-2*this.fBorderWidth.x-this.minFrameWidth);this.frameBoundaries.left=Math.max(this.smallChartBoundaries.left,i)}else if("right"===this.frameDragType){const i=Math.max(this.frameBoundaries.right+t,this.frameBoundaries.left+2*this.fBorderWidth.x+this.minFrameWidth);this.frameBoundaries.right=Math.min(this.smallChartBoundaries.right,i)}else"center"===this.frameDragType&&(this.frameBoundaries.left+t<this.smallChartBoundaries.left||this.frameBoundaries.right+t>this.smallChartBoundaries.right||(this.frameBoundaries.left+=t,this.frameBoundaries.right+=t))}this.predMousePoint=e,this.refreshView(!0)}}onMouseLeave(t){const i=t.target.getBoundingClientRect();this.predMousePoint=new Point(t.clientX-i.left,i.bottom-t.clientY),this.changeFrameAllowed=!1,this.refreshView(!0)}addMobile(){this.canvas.addEventListener("touchstart",function(t){const i=t.touches[0];this.canvas.dispatchEvent(new MouseEvent("mousedown",{clientX:i.clientX,clientY:i.clientY}))}.bind(this)),this.canvas.addEventListener("touchend",function(t){this.canvas.dispatchEvent(new MouseEvent("mouseup",{}))}.bind(this)),this.canvas.addEventListener("touchmove",function(t){this.canvas.dispatchEvent(new MouseEvent("mousemove",{clientX:t.touches[0].clientX,clientY:t.touches[0].clientY}))}.bind(this))}}let jsonData=[];const xhr=new XMLHttpRequest;xhr.open("GET","/chart_data.json"),xhr.onreadystatechange=(t=>{xhr.readyState===XMLHttpRequest.DONE&&200===xhr.status&&(jsonData=JSON.parse(xhr.responseText)).forEach((t,i)=>new TelegramChart(t,"Followers #"+(i+1)))}),xhr.send();